/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window:614499:
  appc.background(230);
} //_CODE_:window:614499:

public void startButton1Clicked(GButton source, GEvent event) { //_CODE_:startButton1:841163:
  if(!reset){
    start=true;
    startButton1.setText("RESET");
    bool1 = true;
    bool2 = false;
    bool3 = true;
    lost1 = false;
    lost2 = false;
    reset = true;
  }
  else{
    start = false;
    startButton1.setText("START");
    reset = false;
    setValues();
    if(lift == 0){
      lift = 50;
    }
  }
} //_CODE_:startButton1:841163:

public void liftSlider1Changed(GSlider source, GEvent event) { //_CODE_:liftSlider1:718669:
  start = false;
  startButton1.setText("START");
  reset = false;
  lift = (10-liftSlider1.getValueF()) * round(stringLength/10);
} //_CODE_:liftSlider1:718669:

public void ballsUpSlider1Change(GSlider source, GEvent event) { //_CODE_:ballsUpSlider1:518675:
  changing=true;
  start = false;
  startButton1.setText("START");
  reset = false;
  int newA = ballsUpSlider1.getValueI();
  if(numBalls<newA){
    //println("The number of balls lifted up exceed the number of total balls");
    //println("The program will show the maximum total number of balls");
    a = numBalls;
  }
  else{
    a = newA;
  }
  changing=false;
} //_CODE_:ballsUpSlider1:518675:

public void ballsSlider1Changed(GSlider source, GEvent event) { //_CODE_:ballsSlider1:812137:
  changing=true;
  start = false;
  startButton1.setText("START");
  reset = false;
  int sliderValue = ballsSlider1.getValueI();
  if(sliderValue<a){
    //println("The number of balls lifted up exceed the number of total balls");
    //println("The program will show the minimum total number of balls");
    numBalls = a;
  }
  else{
    numBalls = sliderValue;
  }
  setValues();
  changing=false;
} //_CODE_:ballsSlider1:812137:

public void energySliderChange(GSlider source, GEvent event) { //_CODE_:energySlider:267625:
  start = false;
  startButton1.setText("START");
  reset = false;
  energyLoss = energySlider.getValueF();
} //_CODE_:energySlider:267625:

public void strLengthSliderChange(GSlider source, GEvent event) { //_CODE_:strLengthSlider:749744:
  start = false;
  startButton1.setText("START");
  reset = false;
  float len = strLengthSlider.getValueF()*10;
  if(len+1<lift){
    stringLength = len;
    lift = round(stringLength-10);
    
  }
  else{
    stringLength = len;
  }
} //_CODE_:strLengthSlider:749744:

public void doubleCheckClicked(GCheckbox source, GEvent event) { //_CODE_:doubleCheck:435497:
  start = false;
  startButton1.setText("START");
  reset = false;
  doublep = !doublep;
} //_CODE_:doubleCheck:435497:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window = GWindow.getWindow(this, "Window title", 0, 0, 400, 300, JAVA2D);
  window.noLoop();
  window.setActionOnClose(G4P.KEEP_OPEN);
  window.addDrawHandler(this, "win_draw1");
  startButton1 = new GButton(window, 10, 20, 90, 30);
  startButton1.setText("START");
  startButton1.addEventHandler(this, "startButton1Clicked");
  liftSlider1 = new GSlider(window, 90, 110, 120, 70, 20.0);
  liftSlider1.setTextOrientation(G4P.CYAN_SCHEME);
  liftSlider1.setRotation(PI/2, GControlMode.CORNER);
  liftSlider1.setLimits(5, 1, 9);
  liftSlider1.setNbrTicks(9);
  liftSlider1.setStickToTicks(true);
  liftSlider1.setNumberFormat(G4P.INTEGER, 0);
  liftSlider1.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  liftSlider1.setOpaque(false);
  liftSlider1.addEventHandler(this, "liftSlider1Changed");
  ballsUpSlider1 = new GSlider(window, 110, 190, 120, 70, 20.0);
  ballsUpSlider1.setShowValue(true);
  ballsUpSlider1.setShowLimits(true);
  ballsUpSlider1.setLimits(1, 1, 10);
  ballsUpSlider1.setNbrTicks(10);
  ballsUpSlider1.setStickToTicks(true);
  ballsUpSlider1.setShowTicks(true);
  ballsUpSlider1.setNumberFormat(G4P.INTEGER, 0);
  ballsUpSlider1.setOpaque(false);
  ballsUpSlider1.addEventHandler(this, "ballsUpSlider1Change");
  ballsSlider1 = new GSlider(window, 110, 80, 120, 70, 20.0);
  ballsSlider1.setShowValue(true);
  ballsSlider1.setShowLimits(true);
  ballsSlider1.setLimits(5, 1, 10);
  ballsSlider1.setNbrTicks(10);
  ballsSlider1.setStickToTicks(true);
  ballsSlider1.setShowTicks(true);
  ballsSlider1.setNumberFormat(G4P.INTEGER, 0);
  ballsSlider1.setOpaque(false);
  ballsSlider1.addEventHandler(this, "ballsSlider1Changed");
  numBallsLabel = new GLabel(window, 110, 60, 120, 20);
  numBallsLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  numBallsLabel.setText("Total number of balls");
  numBallsLabel.setOpaque(false);
  ballsUpLabel = new GLabel(window, 100, 170, 140, 20);
  ballsUpLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  ballsUpLabel.setText("Number of balls lifted up");
  ballsUpLabel.setOpaque(false);
  heightLabel = new GLabel(window, 10, 90, 90, 20);
  heightLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  heightLabel.setText("Drop height");
  heightLabel.setOpaque(false);
  energySlider = new GSlider(window, 260, 80, 120, 70, 10.0);
  energySlider.setShowValue(true);
  energySlider.setShowLimits(true);
  energySlider.setLimits(0.0, 0.0, 100.0);
  energySlider.setNbrTicks(10);
  energySlider.setShowTicks(true);
  energySlider.setNumberFormat(G4P.DECIMAL, 1);
  energySlider.setOpaque(false);
  energySlider.addEventHandler(this, "energySliderChange");
  strLengthSlider = new GSlider(window, 260, 190, 120, 70, 10.0);
  strLengthSlider.setShowValue(true);
  strLengthSlider.setShowLimits(true);
  strLengthSlider.setLimits(10.0, 5.0, 20.0);
  strLengthSlider.setNbrTicks(15);
  strLengthSlider.setShowTicks(true);
  strLengthSlider.setNumberFormat(G4P.DECIMAL, 1);
  strLengthSlider.setOpaque(false);
  strLengthSlider.addEventHandler(this, "strLengthSliderChange");
  strLengthLabel = new GLabel(window, 260, 170, 120, 20);
  strLengthLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  strLengthLabel.setText("String length");
  strLengthLabel.setOpaque(false);
  energyLabel = new GLabel(window, 260, 60, 120, 20);
  energyLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  energyLabel.setText("Energy loss (%)");
  energyLabel.setOpaque(false);
  doubleCheck = new GCheckbox(window, 130, 10, 210, 40);
  doubleCheck.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  doubleCheck.setText("Double Pendulum (only works with 1 ball)");
  doubleCheck.setOpaque(false);
  doubleCheck.addEventHandler(this, "doubleCheckClicked");
  window.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window;
GButton startButton1; 
GSlider liftSlider1; 
GSlider ballsUpSlider1; 
GSlider ballsSlider1; 
GLabel numBallsLabel; 
GLabel ballsUpLabel; 
GLabel heightLabel; 
GSlider energySlider; 
GSlider strLengthSlider; 
GLabel strLengthLabel; 
GLabel energyLabel; 
GCheckbox doubleCheck; 
